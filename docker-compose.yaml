

services:
  mysql:
  # MySQL Datenbank für User- und Order-Service. Persistenz über Volume.
    image: mysql:8.0
    container_name: mysql
    environment:
      MYSQL_ROOT_PASSWORD: rootpw
      MYSQL_DATABASE: demo
      MYSQL_USER: demo
      MYSQL_PASSWORD: demopw
    ports:
      - "3306:3306"
    volumes:
      - mysql-data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 5s
      retries: 10

  keycloak:
  # Keycloak zur Authentifizierung (OIDC/OAuth2), Realm-Import via realm-export.json
    image: quay.io/keycloak/keycloak:24.0.4
    container_name: keycloak
    command: start-dev --import-realm
    volumes:
      - ./keycloak/realm-export.json:/opt/keycloak/data/import/realm-export.json
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    ports:
      - "8080:8080"
    depends_on:
      mysql:
        condition: service_healthy

  user-service:
  # Spring Boot Microservice für Benutzerverwaltung
    build:
      context: user-service
    image: thanhtuanh/user-service:latest
    container_name: user-service
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/demo
      SPRING_DATASOURCE_USERNAME: demo
      SPRING_DATASOURCE_PASSWORD: demopw
    ports:
      - "8081:8080"
    depends_on:
      mysql:
        condition: service_healthy

  order-service:
   # Spring Boot Microservice für Bestellungen, gesichert über JWT/OIDC
    build:
      context: order-service
    image: thanhtuanh/order-service:latest
    container_name: order-service
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/demo
      SPRING_DATASOURCE_USERNAME: demo
      SPRING_DATASOURCE_PASSWORD: demopw
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER_URI: http://keycloak:8080/realms/myrealm
    ports:
      - "8082:8080"
    depends_on:
      mysql:
        condition: service_healthy
      keycloak:
        condition: service_started

volumes:
  mysql-data: